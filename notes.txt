Ch.1 
  three most important things to remember regarding documentation:
    1. what class or module you are looking at.
    2. available class methods
    3. available instance methods - and how to use these different methods
    
  also remember:
    1. how to navigate the CLI. mkdir, cd, cd .., touch, cat, rm, etc
    2. how to use irb for testing out ruby code snippets. exit to close, ctrl-c to abort an infinite loop
    3. how to execute a ruby file: "ruby example_file.rb" will run the file.
    
  used gem install pry to install pry for debugging
    to use pry for debugging you need to put "require "pry"" in your codefile
    then use "binding.pry" after the code you wish to debug. it will pause the code execution and open up pry for you to check it out.
    Ctrl-d will exit this.
    
  modulo operator 16 % 4   value on the left of the "%" is the quotient, value on the right is the "modulus"
    the remainder is 0 so this will return 0
                  16 % 3 will return 1
    division operator is kinda similar 15 / 4 will return 3 because the division operator only returns integers. if you want to be precise 
      youre going to have to use float's.
    
  #remainder method example 16.remainder(5)
    will return 1, the remainder of dividing 5 into 16.
    
  #divmod method does something different... 16.divmod(5)
    will return [3, 1]  giving you the number of times the argument went in and also the remainder.
    
  Elements of an array are stored as an index 0-w/e so you can access any element by calling the index number [0] for example.
  
  Hash or dictionaries are a set of key, value pairs. They are held in {} like a JS object.
  
  When you type something in at the irb prompt you are creating an expression. And expression is anything that can be evaluated. Almost 
    everything you write in Ruby is an expression. And expression in Ruby always returns something, even if thats an error message or nil.
    
  Puts is a method that prints something to the screen. However puts does not return what was printed to the screen. Expressions
    DO something, and also RETURN something. The value RETURNED is not necessarily that action that was performed.
  
  CHAPTER 3
  Methods: when defining a method you can define parameters on that method. Arguments can be passed the method through these parameters
    once in the method they become local variables to the method. So for example:
      We   def say(words)   # the say method and assigned words as a parameter.
      
      Outside the method when we call it (OR INVOKE IT, ie METHOD INVOCATION) using say("whatever words") we are passing in
      "whatever words" as an argument to the method.
      
      #Method invocation with a block
      [1,2,3].each do |num|
        puts num
      end
      
      #Method defined
      def print_num(num)
        puts num
      end
      
      
  
  
  
  
  
  
  
  
  
    
    